---
- name: Install discord-stock-ticker
  hosts: oracle_dst,oc1,indy
  become: yes

  tasks:

    - name: install pip3
      package:
        name: python3-pip
        state: latest
        update_cache: yes

    - name: Install boto3
      pip:
        name: boto3

    - name: create dst dir
      file: 
        state: directory
        path: /etc/discord-stock-ticker
        owner: root
        group: root

    - name: Download dst
      get_url:
        url: "https://github.com/rssnyder/discord-stock-ticker/releases/download/{{ ticker_version }}/discord-stock-ticker-{{ ticker_version }}-{{ arch }}.tar.gz"
        dest: /etc/discord-stock-ticker/discord-stock-ticker.tar.gz
        mode: '0700'

    - name: Extract dst
      unarchive:
        remote_src: yes
        src: /etc/discord-stock-ticker/discord-stock-ticker.tar.gz
        dest: /etc/discord-stock-ticker/
    
    - name: get loader
      get_url:
        url: https://gist.githubusercontent.com/rssnyder/dd543590ae48e45b4e6ab410c01710a0/raw/6ce7f41501382c7c493e6aa1b6eeb033b4d3c4ff/load
        dest: /etc/discord-stock-ticker/load
        mode: '0700'
    
    - name: copy service config
      template: 
        src: dst.service.j2
        dest: "/etc/systemd/system/{{ item.value.name }}.service"
      loop: "{{ clients | dict2items }}"
    
    - name: Pull down DB
      amazon.aws.aws_s3:
        s3_url: "{{ s3_host }}"
        aws_access_key: "{{ s3_username }}"
        aws_secret_key: "{{ s3_password }}"
        encrypt: no
        bucket: tickers
        object: "{{ item.value.name }}.db"
        dest: "/etc/discord-stock-ticker/{{ item.value.name }}.db"
        mode: get
      loop: "{{ clients | dict2items }}"
  
    - name: reload
      shell:
        cmd: systemctl daemon-reload
    
    - name: Stop dst
      systemd:
        state: stopped
        name: "{{ item.value.name }}.service"
      loop: "{{ clients | dict2items }}"

    - name: Sleep for 30 seconds to fill cache
      wait_for:
        timeout: 30
      
    - name: Start dst
      systemd:
        state: restarted
        name: "{{ item.value.name }}.service"
      loop: "{{ clients | dict2items }}"
