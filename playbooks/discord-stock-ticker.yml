---
- name: Install discord-stock-ticker
  hosts: all
  become: yes

  tasks:

    - name: create dst group
      group:
        name: dst
        system: true
        state: present

    - name: create dst user
      user:
        name: dst
        group: dst
        shell: "/usr/sbin/nologin"
        system: true
        createhome: false
        state: present

    - name: install pip3
      package:
        name: python3-pip
        state: latest
        update_cache: yes

    - name: Install boto3
      pip:
        name: boto3

    - name: create dst dir
      file: 
        state: directory
        path: /etc/discord-stock-ticker
        owner: root
        group: root

    - name: Download dst
      get_url:
        url: "https://github.com/rssnyder/discord-stock-ticker/releases/download/{{ ticker_version }}/discord-stock-ticker-{{ ticker_version }}-{{ arch }}.tar.gz"
        dest: /etc/discord-stock-ticker/discord-stock-ticker.tar.gz
        mode: '0700'

    - name: Extract dst
      unarchive:
        remote_src: yes
        src: /etc/discord-stock-ticker/discord-stock-ticker.tar.gz
        dest: /etc/discord-stock-ticker/
    
    - name: copy service config
      template: 
        src: dst.service.j2
        dest: "/etc/systemd/system/{{ item.value.name }}.service"
      loop: "{{ clients | dict2items }}"
    
    - name: allow DST metrics over nebula
      ansible.builtin.lineinfile:
        path: /etc/iptables/rules.v4 
        regexp: '^-A INPUT -i nebula1 -p tcp -m state --state NEW -m tcp --dport {{ item.value.port }} -j ACCEPT$'
        line: -A INPUT -i nebula1 -p tcp -m state --state NEW -m tcp --dport {{ item.value.port }} -j ACCEPT
        insertafter: '^-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT$'
      loop: "{{ clients | dict2items }}"
      when: iptables
    
    - name: restart iptables
      systemd:
        state: restarted
        name: iptables
      when: iptables
    
    - name: Pull state
      amazon.aws.aws_s3:
        s3_url: "{{ s3.host }}"
        aws_access_key: "{{ s3['username'] }}"
        aws_secret_key: "{{ s3['password'] }}"
        encrypt: no
        bucket: tickers
        object: "{{ item.value.name }}.state"
        dest: "/etc/discord-stock-ticker/{{ item.value.name }}.state"
        mode: get
      loop: "{{ clients | dict2items }}"
      when: pull
  
    - name: reload
      shell:
        cmd: systemctl daemon-reload
      
    - name: Start dst
      systemd:
        state: restarted
        name: "{{ item.value.name }}.service"
      loop: "{{ clients | dict2items }}"
